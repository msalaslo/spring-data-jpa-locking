package com.github.msalaslo.locking.api.controller;

import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.github.msalaslo.locking.api.converter.CustomerPessimisticConverter;
import com.github.msalaslo.locking.api.converter.CustomerPessimisticNoIdConverter;
import com.github.msalaslo.locking.api.dto.CustomerDTO;
import com.github.msalaslo.locking.api.dto.CustomerNoIdDTO;
import com.github.msalaslo.locking.domain.entity.CustomerPessimistic;
import com.github.msalaslo.locking.service.CustomerServicePessimistic;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;



/**
 * Customer controller exposing an OpenAPI3 API generated by using the code (springdoc)
 * @since 1.0.0
 * 
 */
@Slf4j
@RestController
@RequestMapping("pessimistic/customers")
@Tag(name = "Customer controller")
public class CustomerControllerPessimistic {

    @Autowired
    private CustomerPessimisticConverter customerConverter;
    
    @Autowired
    private CustomerPessimisticNoIdConverter customerNoIdConverter;
    
    @Autowired
    private CustomerServicePessimistic customerService;

    @GetMapping(produces = "application/json")
    @ResponseBody
    @Operation(
            description = "view the list of ALL customers",
            responses = {
                    @ApiResponse(content = @Content(array = @ArraySchema(schema = @Schema(implementation = CustomerDTO.class))), responseCode = "200")
            }
    )
    public List<CustomerDTO> getCustomers() {
        LOGGER.debug("getItems::Trying to retrieve all items");
        return customerService.getCustomers().stream()
                .map(customerConverter::toCustomerDto)
                .collect(Collectors.toList());
    }
    

    @PostMapping(consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(
            description = "Create a customer"
    )
    public CustomerDTO createCustomer(@Valid @RequestBody CustomerNoIdDTO request) {
        LOGGER.debug("Creating an customer: {}", request.toString());
        CustomerPessimistic customer = customerService.createCustomer(customerNoIdConverter.toCustomer(request));
        return customerConverter.toCustomerDto(customer);
    }
    
    @DeleteMapping(path = "/{id}")
    @ResponseBody
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            description = "Delete a customer"
    )
    public void deleteCustomer(@PathVariable @Valid long id) {
        LOGGER.debug("Deleting an customer: {}", id);
        customerService.deleteCustomer(id);
    }
    
    @PutMapping(path = "/{id}", consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            description = "Modify a customer without locking"
    )
    public CustomerDTO modifyCustomer(@PathVariable @Valid long id, @Valid @RequestBody CustomerNoIdDTO customerDto) {
        LOGGER.debug("Modifying an customer: {}", customerDto);    
        CustomerPessimistic customer = customerNoIdConverter.toCustomer(customerDto);
        customer = customerService.findAndModifyCustomer(id, customer);
        return customerConverter.toCustomerDto(customer);
    }
    
    
    @PutMapping(path = "/read-locking/{id}", consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            description = "Modify a customer using Pessimistic Locking"
    )
    public CustomerDTO modifyCustomerWithPessimisticReadLocking(@PathVariable @Valid long id, @Valid @RequestBody CustomerNoIdDTO customerDto) {
        LOGGER.debug("modifyCustomerWithPessimisticLocking: {}", customerDto);   
        CustomerPessimistic customer = customerNoIdConverter.toCustomer(customerDto);
        customer = customerService.findAndModifyCustomerWithPessimisticReadLocking(id, customer);
        return customerConverter.toCustomerDto(customer);
    }
    
    @PutMapping(path = "/write-locking/{id}", consumes = "application/json", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            description = "Modify a customer using Pessimistic Locking"
    )
    public CustomerDTO modifyCustomerWithPessimisticWriteLocking(@PathVariable @Valid long id, @Valid @RequestBody CustomerNoIdDTO customerDto) {
        LOGGER.debug("modifyCustomerWithPessimisticLocking: {}", customerDto);   
        CustomerPessimistic customer = customerNoIdConverter.toCustomer(customerDto);
        customer = customerService.findAndModifyCustomerWithPessimisticWriteLocking(id, customer);
        return customerConverter.toCustomerDto(customer);
    }
    
    
    @GetMapping(path = "/all-ids", produces = "application/json")
    @ResponseBody
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            description = "Gets all ids for testing purposes"
    )
    public List<Long> getAllIds() {
        LOGGER.debug("Get all ids: {}");
        return customerService.findAllIds();
    }

}
